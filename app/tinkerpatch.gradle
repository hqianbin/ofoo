//---------------------Tinker start---------------------
def projectName = PROJECT_NAME//项目名称
def appName = "app-1.0.2-0531-11-26-32"//基准包的文件名字
def bakPath = file("./backups/" + APP_VERSION)//备份的路径
def APP_VERSION_PATCH = APP_VERSION + "-0"  //补丁版本号
def outputName = projectName + "_" + APP_CODE + "_v" + APP_VERSION //输出名字

def tinkerPatchVersion = file("./tinkerPatchVersion")//补丁版本存放的路径

if (bakPath.list() != null && bakPath.list().length != 0) {
    appName = bakPath.list()[0]
}

if ("BASE".equals(BUILD_BASE_OR_PATCH)) {
    //初始补丁版本，删除基本包
    bakPath.deleteDir();
    //基准包给补丁号，默认设置为0
    if (tinkerPatchVersion.exists()) {
        tinkerPatchVersion.deleteDir()
    }
    //初始一个默认的Patch版本号
    tinkerPatchVersion.mkdirs()
    def pacthVersion = new File(tinkerPatchVersion.getAbsolutePath() + "/patchVersion_0");
    pacthVersion.createNewFile()
    APP_VERSION_PATCH = APP_VERSION + "-0"

} else if ("PATCH".equals(BUILD_BASE_OR_PATCH)) {
    //自增版本号，并且删除之前的版本号
    if (!tinkerPatchVersion.exists()) {
        tinkerPatchVersion.mkdirs()
    }
    if (tinkerPatchVersion.listFiles().length != 0) {
        String tempFileName = tinkerPatchVersion.listFiles()[0].getName()
        def number = Integer.parseInt(tempFileName.substring(tempFileName.lastIndexOf("_") + 1))
        def count = number + 1;
        if (tinkerPatchVersion.exists()) {
            tinkerPatchVersion.deleteDir()
        }
        tinkerPatchVersion.mkdirs()
        def pacthVersionNew = new File(tinkerPatchVersion.getAbsolutePath() + "/patchVersion_" + count);
        pacthVersionNew.createNewFile()
        APP_VERSION_PATCH = APP_VERSION + "-" + count//1.0.0-1
    }
}
//---------------------Tinker end---------------------


android {
    defaultConfig {
        //---------------------Tinker start---------------------
        /**
         * you can use multiDex and install it in your ApplicationLifeCycle implement
         */
        multiDexEnabled true
        /**
         * buildConfig can change during patch!
         * we can use the newly value when patch
         */
        buildConfigField "String", "MESSAGE", "\"I am the base apk\""
//        buildConfigField "String", "MESSAGE", "\"I am the patch apk\""
        /**
         * client version would update with patch
         * so we can get the newly git version easily!
         */
        buildConfigField "String", "TINKER_ID", "\"${getTinkerIdValue()}\""
        buildConfigField "String", "PLATFORM", "\"all\""
        buildConfigField "String", "PATCH_VERSION", "\"${APP_VERSION_PATCH}\""
        //---------------------Tinker end---------------------
    }

    //如果设置渠道包，需要在AndroidManifest配置一下信息
//    <meta-data
//    android:name="UMENG_CHANNEL"
//    android:value="${UMENG_CHANNEL_VALUE}" />
    if(isChannel.toBoolean())
    {
//        productFlavors {
//            "yingyongbao" {}
//        }
//        productFlavors.all { flavor ->
//            flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
//        }
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }
    aaptOptions {
        cruncherEnabled false
    }

}
def gitSha() {
    try {
        //   String gitRev = 'git rev-parse --short HEAD'.execute(null, project.rootDir).text.trim()
        String gitRev = APP_VERSION  //可以按着app版本来
        if (gitRev == null) {
            throw new GradleException("can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'")
        }
        return gitRev
    } catch (Exception e) {
        throw new GradleException("can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'")
    }
}


/**
 * you can use assembleRelease to build you base apk
 * use tinkerPatchRelease -POLD_APK=  -PAPPLY_MAPPING=  -PAPPLY_RESOURCE= to build patch
 * add apk from the build/bakApk
 */
ext {
    //for some reason, you may want to ignore tinkerBuild, such as instant run debug build?
    //true  关闭instant run 才能运行tinker  false 可以使用Instant run ,但是tinker就用不了
    tinkerEnabled = isTinkerEnabled.toBoolean()
    //for normal build
    //old apk file to build patch apk
    tinkerOldApkPath = "${bakPath}/${appName}/" + outputName + ".apk"
    //proguard mapping file to build patch apk
    tinkerApplyMappingPath = "${bakPath}/${appName}/" + outputName + "_mapping.txt"
    //resource R.txt to build patch apk, must input if there is resource changed
    tinkerApplyResourcePath = "${bakPath}/${appName}/" + outputName + "_R.txt"
    //only use for build all flavor, if not, just ignore this field
    // tinkerBuildFlavorDirectory = "${bakPath}/app-0117-16-45-48"
    tinkerBuildFlavorDirectory = "${bakPath}/${appName}"
}



def getOldApkPath() {
    return hasProperty("OLD_APK") ? OLD_APK : ext.tinkerOldApkPath
}

def getApplyMappingPath() {
    return hasProperty("APPLY_MAPPING") ? APPLY_MAPPING : ext.tinkerApplyMappingPath
}

def getApplyResourceMappingPath() {
    return hasProperty("APPLY_RESOURCE") ? APPLY_RESOURCE : ext.tinkerApplyResourcePath
}

def getTinkerIdValue() {
    return hasProperty("TINKER_ID") ? TINKER_ID : gitSha()
}

def buildWithTinker() {
    return hasProperty("TINKER_ENABLE") ? TINKER_ENABLE : ext.tinkerEnabled
}

def getTinkerBuildFlavorDirectory() {
    return ext.tinkerBuildFlavorDirectory
}

if (buildWithTinker()) {
    apply plugin: 'com.tencent.tinker.patch'

    tinkerPatch {
        /**
         * necessary，default 'null'
         * the old apk path, use to diff with the new apk to build
         * add apk from the build/bakApk
         */
        oldApk = getOldApkPath()
        /**
         * optional，default 'false'
         * there are some cases we may get some warnings
         * if ignoreWarning is true, we would just assert the patch process
         * case 1: minSdkVersion is below 14, but you are using dexMode with raw.
         *         it must be crash when load.
         * case 2: newly added Android Component in AndroidManifest.xml,
         *         it must be crash when load.
         * case 3: loader classes in dex.loader{} are not keep in the main dex,
         *         it must be let tinker not work.
         * case 4: loader classes in dex.loader{} changes,
         *         loader classes is ues to load patch dex. it is useless to change them.
         *         it won't crash, but these changes can't effect. you may ignore it
         * case 5: resources.arsc has changed, but we don't use applyResourceMapping to build
         */
        ignoreWarning = true

        /**
         * optional，default 'true'
         * whether sign the patch file
         * if not, you must do yourself. otherwise it can't check success during the patch loading
         * we will use the sign config with your build type
         */
        useSign = true

        /**
         * optional，default 'true'
         * whether use tinker to build
         */
        tinkerEnable = buildWithTinker()

        /**
         * Warning, applyMapping will affect the normal android build!
         */
        buildConfig {
            /**
             * optional，default 'null'
             * if we use tinkerPatch to build the patch apk, you'd better to apply the old
             * apk mapping file if minifyEnabled is enable!
             * Warning:
             * you must be careful that it will affect the normal assemble build!
             */
            applyMapping = getApplyMappingPath()
            /**
             * optional，default 'null'
             * It is nice to keep the resource id from R.txt file to reduce java changes
             */
            applyResourceMapping = getApplyResourceMappingPath()

            /**
             * necessary，default 'null'
             * because we don't want to check the base apk with md5 in the runtime(it is slow)
             * tinkerId is use to identify the unique base apk when the patch is tried to apply.
             * we can use git rev, svn rev or simply versionCode.
             * we will gen the tinkerId in your manifest automatic
             */
            tinkerId = getTinkerIdValue()

            /**
             * if keepDexApply is true, class in which dex refer to the old apk.
             * open this can reduce the dex diff file size.
             */
            keepDexApply = false

            /**
             * optional, default 'false'
             * Whether tinker should treat the base apk as the one being protected by app
             * protection tools.
             * If this attribute is true, the generated patch package will contain a
             * dex including all changed classes instead of any dexdiff patch-info files.
             */
            isProtectedApp = false
        }

        dex {
            /**
             * optional，default 'jar'
             * only can be 'raw' or 'jar'. for raw, we would keep its original format
             * for jar, we would repack dexes with zip format.
             * if you want to support below 14, you must use jar
             * or you want to save rom or check quicker, you can use raw mode also
             */
            dexMode = "jar"

            /**
             * necessary，default '[]'
             * what dexes in apk are expected to deal with tinkerPatch
             * it support * or ? pattern.
             */
            pattern = ["classes*.dex",
                       "assets/secondary-dex-?.jar"]
            /**
             * necessary，default '[]'
             * Warning, it is very very important, loader classes can't change with patch.
             * thus, they will be removed from patch dexes.
             * you must put the following class into main dex.
             * Simply, you should add your own application {@code tinker.sample.android.SampleApplication}
             * own tinkerLoader, and the classes you use in them
             *
             */
            loader = [
                    //use sample, let BaseBuildInfo unchangeable with tinker
                    "tinker.sample.android.app.BaseBuildInfo"
            ]
        }

        lib {
            /**
             * optional，default '[]'
             * what library in apk are expected to deal with tinkerPatch
             * it support * or ? pattern.
             * for library in assets, we would just recover them in the patch directory
             * you can get them in TinkerLoadResult with Tinker
             */
            pattern = ["lib/*/*.so"]
        }

        res {
            /**
             * optional，default '[]'
             * what resource in apk are expected to deal with tinkerPatch
             * it support * or ? pattern.
             * you must include all your resources in apk here,
             * otherwise, they won't repack in the new apk resources.
             */
            pattern = ["res/*", "assets/*", "resources.arsc", "AndroidManifest.xml"]

            /**
             * optional，default '[]'
             * the resource file exclude patterns, ignore add, delete or modify resource change
             * it support * or ? pattern.
             * Warning, we can only use for files no relative with resources.arsc
             */
            ignoreChange = ["assets/sample_meta.txt"]

            /**
             * default 100kb
             * for modify resource, if it is larger than 'largeModSize'
             * we would like to use bsdiff algorithm to reduce patch file size
             */
            largeModSize = 100
        }

        packageConfig {
            /**
             * optional，default 'TINKER_ID, TINKER_ID_VALUE' 'NEW_TINKER_ID, NEW_TINKER_ID_VALUE'
             * package meta file gen. path is assets/package_meta.txt in patch file
             * you can use securityCheck.getPackageProperties() in your ownPackageCheck method
             * or TinkerLoadResult.getPackageConfigByName
             * we will get the TINKER_ID from the old apk manifest for you automatic,
             * other config files (such as patchMessage below)is not necessary
             */
            configField("patchMessage", "tinker is sample to use")
            /**
             * just a sample case, you can use such as sdkVersion, brand, channel...
             * you can parse it in the SamplePatchListener.
             * Then you can use patch conditional!
             */
            configField("platform", "all")
            /**
             * patch version via packageConfig
             */
            configField("patchVersion", APP_VERSION_PATCH)
        }
        //or you can add config filed outside, or get meta value from old apk
        //project.tinkerPatch.packageConfig.configField("test1", project.tinkerPatch.packageConfig.getMetaDataFromOldApk("Test"))
        //project.tinkerPatch.packageConfig.configField("test2", "sample")

        /**
         * if you don't use zipArtifact or path, we just use 7za to try
         */
        sevenZip {
            /**
             * optional，default '7za'
             * the 7zip artifact path, it will use the right 7za with your platform
             */
            zipArtifact = "com.tencent.mm:SevenZip:1.1.10"
            /**
             * optional，default '7za'
             * you can specify the 7za path yourself, it will overwrite the zipArtifact value
             */
//        path = "/usr/local/bin/7za"
        }
    }


    //非渠道包
    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile.name.contains("release")) {
                def originOldPath = getTinkerBuildFlavorDirectory()
                project.tinkerPatch.oldApk = "${originOldPath}/${"release_" + outputName}.apk"
                project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${"release_" + outputName}_mapping.txt"
                project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}${"release_" + outputName}_R.txt"
            } else if (outputFile.name.contains("debug")) {
                def originOldPath = getTinkerBuildFlavorDirectory()
                project.tinkerPatch.oldApk = "${originOldPath}/${"debug_" + outputName}.apk"
                project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${"debug_" + outputName}_mapping.txt"
                project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}${"debug_" + outputName}_R.txt"
            }
        }
    }



    //渠道包
    List<String> flavors = new ArrayList<>();
    project.android.productFlavors.each { flavor ->
        flavors.add(flavor.name)
    }
    boolean hasFlavors = flavors.size() > 0
    /**
     * bak apk and mapping
     */
    android.applicationVariants.all { variant ->

        /**
         * task type, you want to bak
         */
        def taskName = variant.name
        def date = new Date().format("MMdd-HH-mm-ss")

        tasks.all {
            if ("assemble${taskName.capitalize()}".equalsIgnoreCase(it.name)) {
                it.doLast {
                    copy {
                        def fileNamePrefix = "${project.name}-${variant.baseName}"

                        def tinkerId = getTinkerIdValue();
                        //判断渠道包是否大于0 执行不一样的判断
                        def destPath = hasFlavors ? file("${bakPath}/app-${tinkerId}-${date}//${variant.flavorName}") : "${bakPath}/app-${tinkerId}-${date}/"
                        from variant.outputs.outputFile
                        into destPath
                        def assemble = taskName.capitalize();
                        String channel = taskName.capitalize().replace("Release", "").replace("Debug", "").toLowerCase()

                        if (taskName.capitalize().contains("Release")) {

                            assemble = channel.length() == 0 ? "release_" : "_release_"
                        } else if (taskName.capitalize().contains("Debug")) {
                            assemble = channel.length() == 0 ? "debug_" : "_debug_"
                        }

                        rename { String fileName ->
                            fileName.replace("${fileNamePrefix}.apk", "${channel + assemble + outputName}.apk")
                        }
                        from "${buildDir}/outputs/mapping/${variant.dirName}/mapping.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("mapping.txt", "${channel + assemble + outputName}_mapping.txt")
                        }

                        from "${buildDir}/intermediates/symbols/${variant.dirName}/R.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("R.txt", "${channel + assemble + outputName}_R.txt");
                        }
                    }
                }
            }
        }
    }
    project.afterEvaluate {
        //sample use for build all flavor for one time
        if (hasFlavors) {
            task(tinkerPatchAllFlavorRelease) {
                group = 'tinker'
                def originOldPath = getTinkerBuildFlavorDirectory()
                for (String flavor : flavors) {
                    def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Release")
                    dependsOn tinkerTask
                    def preAssembleTask = tasks.getByName("process${flavor.capitalize()}ReleaseManifest")
                    preAssembleTask.doFirst {
                        String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 15)
                        project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${flavorName}_${"release_" + outputName}.apk"
                        project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${flavorName}_${"release_" + outputName}_mapping.txt"
                        project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${flavorName}_${"release_" + outputName}_R.txt"


                    }

                }
            }

            task(tinkerPatchAllFlavorDebug) {
                group = 'tinker'
                def originOldPath = getTinkerBuildFlavorDirectory()
                for (String flavor : flavors) {
                    def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Debug")
                    dependsOn tinkerTask
                    def preAssembleTask = tasks.getByName("process${flavor.capitalize()}DebugManifest")
                    preAssembleTask.doFirst {
                        String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 13)
                        project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${flavorName}_${"debug_" + outputName}.apk"
                        project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${flavorName}_${"debug_" + outputName}_mapping.txt"
                        project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${flavorName}_${"debug_" + outputName}_R.txt"


                    }

                }
            }
        }

    }
}
//---------------------Tinker end---------------------
